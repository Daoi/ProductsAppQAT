{
	"info": {
		"_postman_id": "7c47b476-6172-49ab-8c55-acfe963b434c",
		"name": "productsapp-automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"//Test Json Structure(Objects should have an ID)\r",
							"pm.test(\"response to have an Id/Price/Category/Name\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Id\" && \r",
							"                                 \"[0].Price\" && \r",
							"                                 \"[0].Category\" && \r",
							"                                 \"[0].Name\")\r",
							"});\r",
							"//Test IDs\r",
							"pm.test(\"Value of ID should be index + 1\", function(){\r",
							"    for(var i = 0; i < [].length; i++){\r",
							"            pm.expect(i + 1).to.equal(jsonData[i].Id)\r",
							"    }\r",
							"});\r",
							"//Individual Testing\r",
							"\r",
							"//IDs\r",
							"pm.test(\"value of [0].Id to be 1\", function(){ \r",
							"    pm.expect(1).to.equal(jsonData[0].Id) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [1].Id to be 2\", function(){ \r",
							"    pm.expect(2).to.equal(jsonData[1].Id) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [2].Id to be 3\", function(){ \r",
							"    pm.expect(3).to.equal(jsonData[2].Id) \r",
							"}); \r",
							"\r",
							"pm.test(\"Only 3 products\", function(){ \r",
							"    pm.expect(undefined).to.equal(jsonData[3]) \r",
							"}); \r",
							"//PRICES\r",
							"pm.test(\"value of [0].Price to be 1.0\", function(){ \r",
							"    pm.expect(42.0).to.equal(jsonData[0].Price) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [1].Price to be 3.75\", function(){ \r",
							"    pm.expect(55.75).to.equal(jsonData[1].Price) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [2].Price to be 16.99\", function(){ \r",
							"    pm.expect(0.99).to.equal(jsonData[2].Price) \r",
							"}); \r",
							"//NAMES\r",
							"pm.test(\"value of [0].Id to be 1\", function(){ \r",
							"    pm.expect(\"Tomato Drink\").to.equal(jsonData[0].Name) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [1].Id to be Yo-bo\", function(){ \r",
							"    pm.expect(\"Yo-bo\").to.equal(jsonData[1].Name) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [2].Id to be Hammer\", function(){ \r",
							"    pm.expect(\"Hardware\").to.equal(jsonData[2].Name) \r",
							"}); \r",
							"//Categories\r",
							"pm.test(\"value of [0].Id to be Groceries\", function(){ \r",
							"    pm.expect(\"Schmoceries\").to.equal(jsonData[0].Category) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [1].Id to be Toys\", function(){ \r",
							"    pm.expect(\"Pets\").to.equal(jsonData[1].Category) \r",
							"}); \r",
							"\r",
							"pm.test(\"value of [2].Id to be Hardware\", function(){ \r",
							"    pm.expect(\"Software\").to.equal(jsonData[2].Category) \r",
							"}); \r",
							"\r",
							"//Response status ok\r",
							" pm.test(\"response to be 200 OK\", function(){ \r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"//Response time < 1 second\r",
							"pm.test(\"response time less than 1000MS\", function(){ \r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:51298/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "51298",
					"path": [
						"api",
						"products"
					]
				},
				"description": "asdf"
			},
			"response": []
		},
		{
			"name": "Get Product By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"//Test Json Structure(Objects should have an ID)\r",
							"pm.test(\"response to have an ID\", function(){pm.response.to.have.jsonBody(\"[0].Id\")});\r",
							"//Test IDs\r",
							"pm.test(\"Value of ID should be index + 1\", function(){\r",
							"    for(var i = 0; i < [].length; i++){\r",
							"            pm.expect(i + 1).to.equal(jsonData[i].Id)\r",
							"    }\r",
							"});\r",
							"//Response status ok\r",
							" pm.test(\"response to be 200 OK\", function(){ \r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"//Response time < 1 second\r",
							"pm.test(\"response time less than 1000MS\", function(){ \r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:51298/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "51298",
					"path": [
						"api",
						"products"
					]
				},
				"description": "asdf"
			},
			"response": []
		}
	]
}